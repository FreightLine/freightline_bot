from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    filename="bot.log",
    filemode="a"
)

# –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_API_TOKEN = "8103711147:AAFSavuFJwisZOkf2Ax-Wj7g-8_covtMc6M"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–¥–∞–Ω
if not BOT_API_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ BOT_API_TOKEN.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_API_TOKEN)
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
class DriverRegistration(StatesGroup):
    firm_name = State()
    vehicle_type = State()
    vehicle_number = State()
    vehicle_load = State()
    main_route_pickup = State()
    main_route_dropoff = State()
    return_route_pickup = State()
    return_route_dropoff = State()

# –¢–∏–ø—ã –∞–≤—Ç–æ
TRUCK_TYPES = [
    "–¢–µ–Ω—Ç–æ–≤–∞–Ω–Ω–∞—è (—Ç–µ–Ω—Ç / —à—Ç–æ—Ä–∫–∞)",
    "–ü–∞—Ä–∞–≤–æ–∑ (—Ç–µ–Ω—Ç / —à—Ç–æ—Ä–∫–∞)",
    "–ò–∑–æ—Ç–µ—Ä–º–∏—á–µ—Å–∫–∞—è (–∏–∑–æ—Ç–µ—Ä–º)",
    "–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä (—Ä–µ—Ñ)",
    "–¶–µ–ª—å–Ω–æ–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —Ñ—É—Ä–≥–æ–Ω",
    "–ë–æ—Ä—Ç–æ–≤–∞—è",
    "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤–æ–∑ (20/40 —Ñ—É—Ç–æ–≤)",
    "–ê–≤—Ç–æ–≤–æ–∑",
    "–°–∞–º–æ—Å–≤–∞–ª",
    "–¶–∏—Å—Ç–µ—Ä–Ω–∞",
    "–¢—Ä–∞–ª (–Ω–∏–∑–∫–æ—Ä–∞–º–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞)",
    "–ò—Å—É–∑—É",
    "–ì–∞–∑–µ–ª—å"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–≤—Ç–æ
def get_truck_type_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    for truck_type in TRUCK_TYPES:
        button = InlineKeyboardButton(text=truck_type, callback_data=f"truck_type_{truck_type.lower()}")
        keyboard.add(button)
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(Command("start_registration"))
async def start_registration(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ñ–∏—Ä–º—ã:")
    await state.set_state(DriverRegistration.firm_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã
@dp.message(DriverRegistration.firm_name)
async def process_firm_name(message: types.Message, state: FSMContext):
    await state.update_data(firm_name=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ:", reply_markup=get_truck_type_keyboard())
    await state.set_state(DriverRegistration.vehicle_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –¢–∏–ø –∞–≤—Ç–æ
@dp.callback_query(DriverRegistration.vehicle_type)
async def process_vehicle_type(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith("truck_type_"):
        vehicle_type = callback.data.split("_", 2)[2]
        await state.update_data(vehicle_type=vehicle_type)
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –∞–≤—Ç–æ: {vehicle_type}.")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:")
        await state.set_state(DriverRegistration.vehicle_number)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ù–æ–º–µ—Ä –∞–≤—Ç–æ
@dp.message(DriverRegistration.vehicle_number)
async def process_vehicle_number(message: types.Message, state: FSMContext):
    await state.update_data(vehicle_number=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å (–≤ —Ç–æ–Ω–Ω–∞—Ö):")
    await state.set_state(DriverRegistration.vehicle_load)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å
@dp.message(DriverRegistration.vehicle_load)
async def process_vehicle_load(message: types.Message, state: FSMContext):
    try:
        load = float(message.text.replace(",", "."))
        await state.update_data(vehicle_load=load)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞:")
        await state.set_state(DriverRegistration.main_route_pickup)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç - –º–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏
@dp.message(DriverRegistration.main_route_pickup)
async def process_main_route_pickup(message: types.Message, state: FSMContext):
    await state.update_data(main_route_pickup=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞:")
    await state.set_state(DriverRegistration.main_route_dropoff)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç - –º–µ—Å—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∏
@dp.message(DriverRegistration.main_route_dropoff)
async def process_main_route_dropoff(message: types.Message, state: FSMContext):
    await state.update_data(main_route_dropoff=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):")
    await state.set_state(DriverRegistration.return_route_pickup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –û–±—Ä–∞—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç - –º–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏
@dp.message(DriverRegistration.return_route_pickup)
async def process_return_route_pickup(message: types.Message, state: FSMContext):
    await state.update_data(return_route_pickup=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):")
    await state.set_state(DriverRegistration.return_route_dropoff)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –û–±—Ä–∞—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç - –º–µ—Å—Ç–æ –≤—ã–≥—Ä—É–∑–∫–∏
@dp.message(DriverRegistration.return_route_dropoff)
async def process_return_route_dropoff(message: types.Message, state: FSMContext):
    await state.update_data(return_route_dropoff=message.text)
    data = await state.get_data()

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    info = (
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n\n"
        f"üè¢ –§–∏—Ä–º–∞: {data.get('firm_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üöö –¢–∏–ø –∞–≤—Ç–æ: {data.get('vehicle_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üî¢ –ù–æ–º–µ—Ä –∞–≤—Ç–æ: {data.get('vehicle_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üì¶ –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å: {data.get('vehicle_load', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Ç\n"
        f"üìç –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç: {data.get('main_route_pickup', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚Üí {data.get('main_route_dropoff', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üîÑ –û–±—Ä–∞—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {data.get('return_route_pickup', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚Üí {data.get('return_route_dropoff', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )
    await message.answer(info)
