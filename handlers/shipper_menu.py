from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.filters import Command
from utils.states import ShipperRegistration  # –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
from keyboards.inline import get_truck_type_keyboard  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ—É—Ä—ã
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shipper_menu
@router.message(Command("shipper_menu"))
async def shipper_menu_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑", callback_data="add_cargo"),
        InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤", callback_data="find_carriers"),
        InlineKeyboardButton(text="üìÑ –ú–æ–∏ –≥—Ä—É–∑—ã", callback_data="view_cargo"),
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –≥—Ä—É–∑–æ–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞
@router.callback_query(lambda callback: callback.data == "add_cargo")
async def add_cargo_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∏–ø, –≤–µ—Å, —Ä–∞–∑–º–µ—Ä—ã):")
    await state.set_state(ShipperRegistration.cargo_description)

@router.message(ShipperRegistration.cargo_description)
async def process_cargo_description(message: types.Message, state: FSMContext):
    await state.update_data(cargo_description=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ—É—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è:", reply_markup=get_truck_type_keyboard())
    await state.set_state(ShipperRegistration.truck_type)

@router.callback_query(ShipperRegistration.truck_type)
async def register_truck_type(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith("truck_type_"):
        truck_type = callback.data.split("_", 2)[2]
        await state.update_data(truck_type=truck_type)
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø —Ñ—É—Ä—ã: {truck_type}.")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, –Ω–∞–ª–∏—á–Ω—ã–µ, –ø–µ—Ä–µ–≤–æ–¥):")
        await state.set_state(ShipperRegistration.payment_terms)

@router.message(ShipperRegistration.payment_terms)
async def process_payment_terms(message: types.Message, state: FSMContext):
    await state.update_data(payment_terms=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞ ‚Üí –ö–∞–∑–∞–Ω—å):")
    await state.set_state(ShipperRegistration.route)

@router.message(ShipperRegistration.route)
async def process_route(message: types.Message, state: FSMContext):
    await state.update_data(route=message.text)
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ
    cargo_info = (
        f"–ì—Ä—É–∑ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ\n\n"
        f"üì¶ –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞: {data['cargo_description']}\n"
        f"üöö –¢–∏–ø —Ñ—É—Ä—ã: {data['truck_type']}\n"
        f"üí≥ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {data['payment_terms']}\n"
        f"üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {data['route']}"
    )
    await message.answer(cargo_info)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤
@router.callback_query(lambda callback: callback.data == "find_carriers")
async def find_carriers_handler(callback: CallbackQuery):
    await callback.message.answer("–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä—É–∑–æ–≤
@router.callback_query(lambda callback: callback.data == "view_cargo")
async def view_cargo_handler(callback: CallbackQuery):
    await callback.message.answer("–í–∞—à–∏ –≥—Ä—É–∑—ã: \n1. –ì—Ä—É–∑ 1 (–ú–æ—Å–∫–≤–∞ ‚Üí –ö–∞–∑–∞–Ω—å)\n2. –ì—Ä—É–∑ 2 (–ö–∞–∑–∞–Ω—å ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥).")
    await callback.answer()